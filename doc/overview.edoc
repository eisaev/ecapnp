@copyright 2013, Andreas Stenius <kaos@astekk.se>
@author Andreas Stenius <kaos@astekk.se> [http://blog.astekk.se]
@title Overview of ecapnp: the Cap'n Proto library for Erlang
@version {@version}
@doc

== Description ==

The `ecapnp' library implements the a Cap'n Proto compiler plugin for
compiling schema files to Erlang header files.

The compiled schemas can then be included in any Erlang module to
process Cap'n Proto messages.

To invoke the {@link ecapnpc. Cap'n Proto Erlang compiler plugin}, it
is convenient to use the `capnpc-erl' script like this:
<pre>
  <code>capnpc -oerl my_schema.capnp</code>
</pre>

This requires that `ecapnp/bin/ecapnpc-erl' is in your `$PATH', and
that `ecapnp' is in your Erlang <a
href="http://www.erlang.org/doc/man/code.html#id102620">libs path</a>
(hint: use the `ERL_LIBS' environment variable).

//TODO: See {@section Installation} for more details.


== Schema ==

The schema file, once compiled into an Erlang `.hrl'-file and included
in a module, exports a set of functions matching the name of the
schema for reading and writing Cap'n Proto messages.

Typically, this is `schema(root, ...)' for getting a <a
href="http://kentonv.github.io/capnproto/encoding.html#messages">root
object</a>, `schema(get, Field, Object)' for reading and `schema(set,
Field, Value, Object)' for writing; where `schema' is the name of the
schema file.

There are also functions for type casting references to lists (or
text/data) or other structs (useful when reading fields of type
`object').

See {@link ecapnpc} for details on the compiled schema.

=== Example ===

A practical example is best to show what it looks like. 

The `addressbook' example from Cap'n Proto has been ported and serves
as an example for ecapnp as well; and is included here as a reference
example.

==== Addressbook schema ====

The `addressbook.capnp' schema is defined thus:
<pre>``
@0x9eb32e19f86ee174;

using Cxx = import "/capnp/c++.capnp";
$Cxx.namespace("addressbook");

struct Person {
  id @0 :UInt32;
  name @1 :Text;
  email @2 :Text;
  phones @3 :List(PhoneNumber);

  struct PhoneNumber {
    number @0 :Text;
    type @1 :Type;

    enum Type {
      mobile @0;
      home @1;
      work @2;
    }
  }

  employment :union {
    unemployed @4 :Void;
    employer @5 :Text;
    school @6 :Text;
    selfEmployed @7 :Void;
    # We assume that a person is only one of these.
  }
}

struct AddressBook {
  people @0 :List(Person);
}
''
</pre>

And when compiled with `capnpc -oerl addressbook.capnp', resulting in
a `addressbook.capnp.hrl'-file, these functions are defined (as `addressbook/N'):
<dl>
  <dt>Write value to object field.</dt>
  <dd>{@type fun((set, Field::atom(), Value::term(), object()) -> ok)}</dd>

  <dt>Get a reference to the root object in message.</dt>
  <dd>{@type fun((root, Type::atom() | integer(), Message::list(binary())) -> {ok, Root::object()@})}</dd>

  <dt>Read object field value.</dt>
  <dd>{@type fun((get, Field::atom(), object()) -> term())}</dd>

  <dt>Type cast object to another struct or list.</dt>
  <dd>{@type fun((to_struct, Type::atom() | integer(), object()) -> object())}<br/>
      {@type fun((to_list, Type::atom() | integer(), object()) -> list())}</dd>

  <dt>Set root type for a new message.</dt>
  <dd>{@type fun((root, Type::atom() | integer()) -> {ok, Root::object()@})}</dd>

  <dt>Read unnamed union value of object.</dt>
  <dd>{@type fun((get, object()) -> (Tag::atom() | {Tag::atom(), Value::term()@}))}</dd>

  <dt>Type cast object to text/data.</dt>
  <dd>{@type fun((to_text | to_data, object()) -> binary())}</dd>

  <dt>Get the compiled schema.</dt>
  <dd>{@type fun((schema) -> schema())}</dd>
</dl>

==== Writing an addressbook ====

To write a addressbook message, we first need a `AddressBook' root object:

``{ok, AddressBook} = addressbook(root, 'AddressBook').''

Now, we can fill in the details. Let's add two people, and call them
`Alice' and `Bob':

``[Alice, Bob] = addressbook(set, people, 2, AddressBook).''

Now, `Alice' has one phone number, while `Bob' has two:

``[addressbook(set, phones, N, P) || {P, N} <- [{Alice, 1}, {Bob, 2}]].''

Ok, we're all set to fill in the blanks of the people and phone objects we have allocated:

<pre>
``
[addressbook(set, Field, Value, Obj)
 || {Obj, FieldValue} <-
          [{Alice,
                [{id, 123},
                 {name, <<"Alice">>},
                 {email, <<"alice@example.com">>},
                 {employment, {shool, <<"MIT">>}},
                 {phones, {0, {number, <<"555-1212">>}}},
                 {phones, {0, {type, mobile}}}]},
           {Bob,
                [{id, 456},
                 {name, <<"Bob">>},
                 {email, <<"bob@example.com">>},
                 {employment, unemployed},
                 {phones, {0, {number, <<"555-4567">>}}},
                 {phones, {0, {type, home}}},
                 {phones, {1, {number, <<"555-7654">>}}},
                 {phones, {1, {type, mobile}}}]}],
    {Field, Value} <- FieldValues].
''
</pre>

There's quite a number of `addressbook(set, ...)'-calls there. Also
note that we could have saved a reference to the phone objects
directly and used those instead of embedding them in the calls to
Alice and Bob, when we allocated the phone objects, the same way we
saved the result when allocating people.

All that is left now is to get the message out. Here's how to get a
packed binary ready for dispatching:

``Data = ecapnp_serialize:pack(ecapnp_message:write(AddressBook)).''

If you intend to send it to `io', make sure it uses `unicode' encoding:

``io:setopts([{encoding, unicode}]).'' will take care of it.


==== Reading an addressbook message ====

To be written...


== Project info ==
<dl>
  <dt>Project page</dt><dd>[http://ecapnp.astekk.se]</dd>
  <dt>Source code</dt><dd>[http://github.com/kaos/ecapnp]</dd>
  <dt>Cap'n Proto</dt>
  <dd>
    Home: [http://capnproto.com] <br/>
    Code: [http://github.com/kentonv/capnproto]
  </dd>
  <dt>License</dt><dd>
   <pre>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</pre>
  </dd>
</dl>
